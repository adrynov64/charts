apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Release.Name }}-denoweb" #TES
  labels:
    {{- include "tp4.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.web.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "tp4.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "tp4.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "tp4.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: "{{ .Release.Name }}-denoweb"
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.web.image.repository }}:{{ .Values.web.image.tag }}"
          imagePullPolicy: {{ .Values.web.image.pullPolicy }}
          volumeMounts:
            - name: "{{ .Release.Name }}-{{ .Values.web.volumeMounts.name }}"
              mountPath: {{ .Values.web.volumeMounts.mountPath }}
      volumes:
        - name: "{{ .Release.Name }}-{{ .Values.web.volumes.name }}"
          persistentVolumeClaim:
            claimName: "{{ .Release.Name }}-{{ .Values.web.volumes.claimName }}"
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

{{- $relname := .Release.Name -}}
{{- if .Values.volumes }}
  {{- range $vol := .Values.volumes }}
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: "{{ $relname }}-{{ $vol.name }}"
spec:
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: {{ $vol.persistentVolumeReclaimPolicy }}
  storageClassName: standard
  capacity:
    storage: {{ $vol.size }}
  hostPath:
    path: {{ $vol.path }}

  {{- end }}
  {{- end }}



{{- if .Values.volumeClaims }}
  {{- range $volC := .Values.volumeClaims }}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: "{{ $relname }}-{{ $volC.volumeName }}"
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {{ $volC.size }}

  {{- end }}
  {{- end }}

